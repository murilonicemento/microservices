services:
  orders-microservice:
    image: orders-microservice
    container_name: orders-microservice
    build:
      context: ./Microservices.OrderService/
      dockerfile: OrderMicroservice.API/Dockerfile
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__MongoDB=${MONGODB_CONNECTION_STRING}
      - ConnectionStrings__Redis=${REDIS_CONNECTION_STRING}
      - RabbitMQ=${RABBITMQ_CONNECTION_STRING}
      - UsersMicroserviceName=api-gateway
      - UsersMicroservicePort=8080
      - ProductsMicroserviceName=api-gateway
      - ProductsMicroservicePort=8080
    ports:
      - "7000:8080"
    networks:
      - orders-microservice-mongodb-network
      - microservice-network
    depends_on:
      - mongodb
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - ./init-db/mongodb.js:/docker-entrypoint-initdb.d/mongodb.js
    networks:
      - orders-microservice-mongodb-network
  products-microservice:
    image: products-microservice
    container_name: products-microservice
    build:
      context: ./Microservices.ProductService
      dockerfile: ProductService.API/Dockerfile
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__MySQL=${MYSQL_CONNECTION_STRING}
      - RabbitMQ_HostName=rabbitmq
      - RabbitMQ_UserName=user
      - RabbitMQ_Password=password
      - RabbitMQ_Port=5672
    ports:
      - "6001:8080"
    networks:
      - products-microservice-mysql-network
      - microservice-network
    depends_on:
      - mysql
  mysql:
    image: mysql:latest
    container_name: mysql
    env_file:
      - .env
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - ./init-db/mysql.sql:/docker-entrypoint-initdb.d/mysql.sql
    networks:
      - products-microservice-mysql-network
  users-microservice:
    image: users-microservice
    container_name: users-microservice
    build:
      context: ./Microservices.UserService
      dockerfile: UserService.API/Dockerfile
    environment:
      - ASPNETCORE_HTTP_ENVIRONMENT=Development
      - ConnectionStrings__PostgreSQL=${POSTGRESQL_CONNECTION_STRING}
    ports:
      - "5000:9090"
    networks:
      - users-microservice-postgres-network
      - microservice-network
    depends_on:
      - postgres
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - ./init-db/postgres.sql:/docker-entrypoint-initdb.d/postgres.sql
    networks:
      - users-microservice-postgres-network
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - microservice-network
  api-gateway:
    image: api-gateway
    container_name: api-gateway
    build:
      context: ./Microservices.ApiGateway/ApiGateway
      dockerfile: Dockerfile
    ports:
      - "4000:8080"
    networks:
      - microservice-network
  rabbitmq:
    image: rabbitmq:latest
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    networks:
      - microservice-network
volumes:
  redis-data:
networks:
  orders-microservice-mongodb-network:
    driver: bridge
  products-microservice-mysql-network:
    driver: bridge
  users-microservice-postgres-network:
    driver: bridge
  microservice-network:
    driver: bridge