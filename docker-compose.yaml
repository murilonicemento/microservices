version: '3.4'

services:
  orders-microservice:
    image: orders-microservice
    build:
      context: .
      dockerfile: ./Microservices.OrderService/OrderMicroservice.API/Dockerfile
    environment:
      - MONGODB_HOST=mongodb-container
      - MONGODB_PORT=27017
      - MONGODB_DATABASE=OrdersDatabase
      - UsersMicroserviceName=apigateway
      - UsersMicroservicePort=8080
      - ProductsMicroserviceName=apigateway
      - ProductsMicroservicePort=8080
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RabbitMQ_HostName=rabbitmq
      - RabbitMQ_UserName=user
      - RabbitMQ_Password=password
      - RabbitMQ_Port=5672
    ports:
      - "7000:8080"
    networks:
      - orders-mongodb-network
      - ecommerce-network
    depends_on:
      - mongodb
  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - ./init-db/mongodb.js:/docker-entrypoint-initdb.d
    networks:
      - orders-microservice-mongodb-network
  products-microservice:
    image: products-microservice
    build:
      context: .
      dockerfile: ./Microservices.ProductService/ProductService.API/Dockerfile
    environment:
      - ASPNETCORE_HTTP_PORTS=8080
      - ASPNETCORE_ENVIRONMENT=Development
      - MYSQL_HOST=mysql-container
      - MYSQL_PORT=3306
      - MYSQL_DATABASE=ecommerceproductsdatabase
      - MYSQL_USER=root
      - MYSQL_PASSWORD=admin
      - RabbitMQ_HostName=rabbitmq
      - RabbitMQ_UserName=user
      - RabbitMQ_Password=password
      - RabbitMQ_Port=5672
    ports:
      - "6001:8080"
    networks:
      - products-mysql-network
      - ecommerce-network
    depends_on:
      - mysql
  mysql:
    image: mysql:latest
    environment:
      - MYSQL_ROOT_PASSWORD=admin
    ports:
      - "3306:3306"
    volumes:
      - ./init-db/mysql.sql:/docker-entrypoint-initdb.d
    networks:
      - products-mysql-network
  users-microservice:
    image: users-microservice
    build:
      context: .
      dockerfile: ./Microservices.UserService/Microservices.API/Dockerfile
    environment:
      - ASPNETCORE_HTTP_PORTS=8080
      - ASPNETCORE_HTTP_ENVIRONMENT=Development
      - POSTGRES_HOST=postgres-container
      - POSTGRES_PORT=5432
      - POSTGRES_DATABASE=eCommerceUsers
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=admin
    ports:
      - "5000:9090"
    networks:
      - users-postgres-network
      - ecommerce-network
    depends_on:
      - postgres
  postgres:
    image: postgres:latest
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=eCommerceUsers
    ports:
      - "5432:5432"
    volumes:
      - ./init-db/postgres.sql:/docker-entrypoint-initdb.d
    networks:
      - users-postgres-network
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - ecommerce-network
  api-gateway:
    image: api-gateway
    build:
      context: .
      dockerfile: ./Microservices.ApiGateway/ApiGateway/Dockerfile
    ports:
      - "4000:8080"
    networks:
      - ecommerce-network
  rabbitmq:
    image: rabbitmq:latest
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
    networks:
      - ecommerce-network
networks:
  orders-mongodb-network:
    driver: bridge
  products-mysql-network:
    driver: bridge
  users-postgres-network:
    driver: bridge
  ecommerce-network:
    driver: bridge